import java.util.Random;


public class GameManager {
	private Board board;
	private Clock clock;
	private DirectionBoard directionBoard;
	private int points;
	
	public GameManager(String name, int points, int minutes, int seconds){
		this.points = points;
		this.board = new Board(new Player(name),7,5);
		this.clock = new Clock(minutes, seconds);
		this.directionBoard = new DirectionBoard(5);
	}
	
	public void initialize(){
		Thread clockThread = new Thread(clock);
		Cell[][] newCells = new Cell[this.board.getRows()][this.board.getColumns()];
		for(int i = 0; i < newCells.length; i ++){
			for(int j = 0; j < newCells[i].length; j ++){
				Random rand = new Random();
				int number = rand.nextInt(4);
				if(number == 0)
					newCells[i][j] = new Cell(new Direction(true,false,false,false));
				else if(number == 1)
					newCells[i][j] = new Cell(new Direction(false,true,false,false));
				else if(number == 2)
					newCells[i][j] = new Cell(new Direction(false,false,true,false));
				else
					newCells[i][j] = new Cell(new Direction(false,false,false,true));
			}
		}
		this.board.setCells(newCells);
		for(int i = 0;i < this.directionBoard.getDirections().length; i++){
			Random rand = new Random();
			int number = rand.nextInt(4);
			if(number == 0)
				this.directionBoard.setDirection(new Direction(true,false,false,false), i);
			else if(number == 1)
				this.directionBoard.setDirection(new Direction(false,true,false,false), i);
			else if(number == 2)
				this.directionBoard.setDirection(new Direction(false,false,true,false), i);
			else
				this.directionBoard.setDirection(new Direction(false,false,false,true), i);
		}
		clockThread.start();
	}
	
	public void movePlayer(int x, int y){
		if(this.board.inBoundary(x, y)){
			this.board.getPlayer().setX(x);
			this.board.getPlayer().setY(y);
		}
	}
	
	public int getPlayerX(){
		return this.board.getPlayer().getX();
	}
	
	public int getPlayerY(){
		return this.board.getPlayer().getY();
	}
}
